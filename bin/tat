#!/usr/bin/env python3

__version__ = '1.0'
__profiling__ = False

import argparse
import sys
import os
import matplotlib.pyplot as plt

try:
    from attrs import Config
except ImportError:
    sys.path.append(os.path.join(os.getcwd(), 'tatt'))
    from attrs import Config

from layout import Layout

def do_work( args ):

    if args.config is not None:
        config = Config(args.config)
        layout = Layout(config=config)
        layout.do_mods(args.mods, args.decay)
    else:
        layout = Layout()
        layout.randomize(args.random)

    fig, ax = plt.subplots()
    fig.set_facecolor('k')

    layout.render(ax)

    plt.gca().set_aspect('equal', adjustable='box')
    plt.axis('off')

    if args.filename is not None:
        plt.savefig(args.filename, dpi=300, format='png')
    else:
        plt.show()

    plt.close(fig)
    del fig

    return 0

###############################################################################

if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument('--config', help='Config file', default=None)
    parser.add_argument('--mods', help='Do this many mods', type=int, default=0)
    parser.add_argument('--decay', help='Decay rate during mods', type=int, default=3)
    parser.add_argument('--filename', help='Save the rendered layout to file', default=None)
    parser.add_argument('--random', type=int, default=1, help='Produce this many random stars')

    #-------------------------------------------------
    # get and check options
    if(len(sys.argv) == 1):
        pass
    elif(sys.argv[1] == '-v' or \
        sys.argv[1] == '--v' or \
        sys.argv[1] == '-version' or \
        sys.argv[1] == '--version'):
        print('%s: version: %s' % (__script_name__, __version__))
        sys.exit(0)
    elif(sys.argv[1] == '-h' or \
        sys.argv[1] == '--h' or \
        sys.argv[1] == '-help' or \
        sys.argv[1] == '--help'):
        parser.print_help()
        sys.exit(0)

    args = parser.parse_args()

    try:
        if(__profiling__):
            import cProfile
            cProfile.run('do_work(args)', 'prof')
            ##########################################
            ##########################################
            # Use this in python console!
            #import pstats
            #p = pstats.Stats('prof')
            #p.sort_stats('cumulative').print_stats(10)
            #p.sort_stats('time').print_stats(10)
            ##########################################
            ##########################################
        else:
            do_work(args)
    except:
        print('Unexpected error:', sys.exc_info()[0])
        raise
